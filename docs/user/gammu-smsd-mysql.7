.TH GAMMU-SMSD-MYSQL 7 "January  8, 2009" "Gammu 1.23.0" "Gammu Documentation"
.SH NAME

.P
gammu\-smsd\-mysql - gammu\-smsd(1) backend using MySQL database server as a message storage

.SH DESCRIPTION
gammu\-smsd(1) supports several backends. Actual backend is chosen in
a config file gammu\-smsdrc(5).

MYSQL backend stores all data in a MySQL database server, which parameters are
defined by configuration (see gammu\-smsdrc(5) for description of configuration
options).

More SMS daemons can share single database. If you do not specify PhoneID in
their configuration, all are treated equally and you have no guarantee which
one sends outgoing message. If you configure PhoneID and use it when inserting
message to the outbox table (gammu\-smsd\-inject(1) does this), each SMS
daemon will have separate outbox queue.

.SS Receiving of messages

Received messages are stored in inbox table.

.SS Transmitting of messages

Transmitted messages are read from table outbox and possible subsequent parts
of the same message from outbox_multipart.

.SS Description of tables

.TP
.BI daemons

Information about running daemons.

.TP
.BI gammu

Table holding single value - version of a database schema. See HISTORY for
details what has changed.

.TP
.BI inbox

Table where received messages will be stored.

Fields description:

\fBUpdatedInDB\fR (timestamp)
.br
when somebody (daemon, user, etc.) updated it

\fBReceivingDateTime\fR (timestamp)
.br
when SMS was received

\fBText\fR (text)
.br
encoded SMS text (for all SMS)

\fBSenderNumber\fR (varchar(20))
.br
decoded SMS sender number

\fBCoding\fR (enum('Default_No_Compression', 'Unicode_No_Compression', '8bit', 'Default_Compression', 'Unicode_Compression'))
.br
SMS text coding

\fBUDH\fR (text)
.br
encoded User Data Header text

\fBSMSCNumber\fR (varchar(20))
.br
decoded SMSC number

\fBClass\fR (integer)
.br
SMS class or -1

\fBTextDecoded\fR (varchar(160))
.br
decoded SMS text (for Default Alphabet/Unicode SMS)

\fBID\fR (integer unsigned)
.br
SMS identificator (for using with external applications)

\fBRecipientID\fR (text)
.br
which Gammu daemon has added it

\fBProcessed\fR (enum('false', 'true'))
.br
you can use for marking, whether SMS was processed or not


.TP
.BI outbox

Messages enqueued for sending should be placed in this table. If message
is multipart, subsequent parts are stored in table outbox_multipart.

Fields description:

\fBUpdatedInDB\fR (timestamp)
.br
when somebody (daemon, user, etc.) updated it

\fBInsertIntoDB\fR (timestamp)
.br
when message was inserted into database

\fBSendingDateTime\fR (timestamp)
.br
set it to some value, when want to force sending after some planned time

\fBText\fR (text)
.br
SMS text encoded using hex values

\fBDestinationNumber\fR (varchar(20))
.br
recipient number

\fBCoding\fR (enum('Default_No_Compression', 'Unicode_No_Compression', '8bit', 'Default_Compression', 'Unicode_Compression'))
.br
SMS text coding

\fBUDH\fR (text)
.br
User Data Header encoded using hex values

\fBClass\fR (integer)
.br
SMS class or -1

\fBTextDecoded\fR (varchar(160))
.br
SMS text in "human readable" form

\fBID\fR (integer unsigned)
.br
SMS/SMS sequence ID

\fBMultiPart\fR (enum('false','true'))
.br
info, whether there are more SMS from this sequence in outbox_multipart

\fBRelativeValidity\fR (integer)
.br
SMS relative validity like encoded using GSM specs

\fBSenderID\fR (text)
.br
which SMSD instance should send this one sequence

\fBSendingTimeOut\fR (timestamp)
.br
used by SMSD instance for own targets

\fBDeliveryReport\fR (enum('default','yes','no'))
.br
when default is used, Delivery Report is used or not according to SMSD instance settings; yes forces Delivery Report.

\fBCreatorID\fR (text)
.br
sender identification, it has to match PhoneID in SMSD configuration to make
SMSD process this message




.TP
.BI outbox_multipart

Data for outgoing multipart messages.

Fields description:

\fBID\fR (integer unsigned)
.br
\fBText\fR (text)
.br
\fBCoding\fR (enum('Default_No_Compression', 'Unicode_No_Compression', '8bit', 'Default_Compression', 'Unicode_Compression'))
.br
\fBUDH\fR (text)
.br
\fBClass\fR (integer)
.br
\fBTextDecoded\fR (varchar(160))
.br
\fBID\fR (integer unsigned)
.br
the same meaning as values in outbox table

\fBSequencePosition\fR (integer)
.br
info, what is SMS number in SMS sequence


.TP
.BI phones

Information about connected phones. This table is periodically refreshed and
you can get information such as battery or signal level from here.

Fields description:

\fBID\fR (text)
.br
PhoneID value

\fBUpdatedInDB\fR (timestamp)
.br
when this record has been updated

\fBInsertIntoDB\fR (timestamp)
.br
when this record has been created (when phone has been connected)

\fBTimeOut\fR (timestamp)
.br
when this record expires

\fBSend\fR (boolean)
.br
currently always true

\fBReceive\fR (boolean)
.br
currently always true

\fBIMEI\fR (text)
.br
IMEI of phone

\fBClient\fR (text)
.br
client name, usually string Gammu with version

\fBBattery\fR (integer)
.br
battery level (or -1 if uknonwn)

\fBSignal\fR (integer)
.br
signal level (or -1 if uknonwn)

.TP
.BI sentitems

Log of sent messages, if delivery reports are configured, message state is
updated here.

Fields description:

\fBUpdatedInDB\fR (timestamp)
.br
when somebody (daemon, user, etc.) updated it

\fBInsertIntoDB\fR (timestamp)
.br
when message was inserted into database

\fBSendingDateTime\fR (timestamp)
.br
when message has been sent

\fBDeliveryDateTime\fR (timestamp)
.br
when Delivery Report was used for SMS, this entry contains time of receiving this report

\fBStatus\fR (enum('SendingOK', 'SendingOKNoReport', 'SendingError', 'DeliveryOK', 'DeliveryFailed', 'DeliveryPending', 'DeliveryUnknown', 'Error'))
.br
when Delivery Report was used for SMS, this entry contains human readable error code

\fBStatusError\fR (integer)
.br
when Delivery Report was used for SMS, this entry contains error code like in GSM specs

\fBText\fR (text)
.br
SMS text encoded using hex values

\fBDestinationNumber\fR (varchar(20))
.br
decoded destination number for SMS

\fBCoding\fR (enum('Default_No_Compression', 'Unicode_No_Compression', '8bit', 'Default_Compression', 'Unicode_Compression'))
.br
SMS text coding

\fBUDH\fR (text)
.br
User Data Header encoded using hex values

\fBSMSCNumber\fR (varchar(20))
.br
decoded number of SMSC, which sent SMS

\fBClass\fR (integer)
.br
SMS class or -1

\fBTextDecoded\fR (varchar(160))
.br
SMS text in "human readable" form

\fBID\fR (integer unsigned)
.br
SMS ID

\fBSenderID\fR (text)
.br
which SMSD instance sent this one sequence

\fBSequencePosition\fR (integer)
.br
SMS number in SMS sequence

\fBTPMR\fR (integer)
.br
Message Reference like in GSM specs

\fBRelativeValidity\fR (integer)
.br
SMS relative validity like encoded using GSM specs

\fBCreatorID\fR (text)
.br
copied from CreatorID from outbox table, matches PhoneID


.TP
.BI pbk

Not used by SMSD currently, included only for application usage.

.TP
.BI pbk_groups

Not used by SMSD currently, included only for application usage.

.SH HISTORY

History of schema versions:

8 - introduced phones table

7 - added CreatorID to tables (it holds PhoneID if set)

.SH EXAMPLE

SQL script to create all needed tables is included in Gammu documenation. As
well as some PHP scripts interacting with the database.

.SH SEE ALSO
gammu\-smsd(1), gammu\-smsdrc(5), gammu(1), gammurc(5)
.SH AUTHOR
gammu\-smsd and this manual page were written by Michal Cihar <michal@cihar.com>.
.SH COPYRIGHT
Copyright \(co 2009 Michal Cihar and other authors.
License GPLv2: GNU GPL version 2 <http://www.gnu.org/licenses/old\-licenses/gpl\-2.0.html>
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH REPORTING BUGS
Please report bugs to <http://bugs.cihar.com>.
