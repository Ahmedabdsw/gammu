.TH "GAMMURC" "5" "December 02, 2010" "1.28.94" "Gammu"
.SH NAME
gammurc \- gammu(1) configuration file
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.\" Man page generated from reStructeredText.
.
.SH SYNOPSIS
.sp
On Linux, MacOS X, BSD and other Unix\-like systems, the config file is
searched in following order:
.INDENT 0.0
.IP 1. 3
.
\fB$XDG_CONFIG_HOME/gammu/config\fP
.IP 2. 3
.
\fB~/.config/gammu/config\fP
.IP 3. 3
.
\fB~/.gammurc\fP
.IP 4. 3
.
\fB/etc/gammurc\fP
.UNINDENT
.sp
On Microsoft Windows:
.INDENT 0.0
.IP 1. 3
.
\fB$PROFILE\eApplication Data\egammurc\fP
.IP 2. 3
.
\fB.\egammurc\fP
.UNINDENT
.SH DESCRIPTION
.sp
\fIgammu\fP reads configuration from a config file. It\(aqs location is determined
on runtime, see above for search paths.
.sp
You can use \fIgammu\-config\fP to generate configuration file.
.sp
This file use ini file syntax, see \fIini\fP.
.sp
Configuration file for gammu can contain several sections \- \fB[gammu]\fP, \fB[gammu1]\fP,
\fB[gammuN]\fP, ... Each section configures one connection setup and in default mode
gammu tries all of them in numerical order. You can also specify which
configuration section to use by giving it\(aqs number (\fI\%[gammu]\fP has number 0) as a
parameter to \fIgammu\fP and it will then use only this section.
.INDENT 0.0
.TP
.B [gammu]
.UNINDENT
.sp
This section is read by default unless you specify other on command line.
.SS Device connection parameters
.INDENT 0.0
.TP
.B Connection
.
Protocol which will be used to talk to your phone.
.sp
For Nokia cables you want to use one of following:
.INDENT 7.0
.TP
.B \fBfbus\fP
.sp
serial FBUS connection
.TP
.B \fBdlr3\fP
.sp
DLR\-3 and compatible cables
.TP
.B \fBdku2\fP
.sp
DKU\-2 and compatible cables
.TP
.B \fBdku5\fP
.sp
DKU\-5 and compatible cables
.TP
.B \fBmbus\fP
.sp
serial MBUS connection
.UNINDENT
.sp
If you use some non original cable, you might need to append \fB\-nodtr\fP (eg. for
ARK3116 based cables) or \fB\-nopower\fP, but Gammu should be able to detect this
automatically.
.sp
For non\-Nokia phones connected using cable you generally want:
.INDENT 7.0
.TP
.B \fBat\fP
.sp
generic AT commands based connection
.UNINDENT
.sp
You can optionally specify speed of the connection, eg. \fBat19200\fP, but it is
not needed for modern USB cables.
.sp
For IrDA connections use one of following:
.INDENT 7.0
.TP
.B \fBirdaphonet\fP
.sp
Phonet connection for Nokia phones.
.TP
.B \fBirdaat\fP
.sp
AT commands connection for most of phones (this is not supported on Linux).
.TP
.B \fBirdaobex\fP
.sp
OBEX (IrMC or file transfer) connection for most of phones.
.TP
.B \fBirdagnapbus\fP
.sp
GNapplet based connection for Symbian phones
.UNINDENT
.sp
For Bluetooth connection use one of following:
.INDENT 7.0
.TP
.B \fBbluephonet\fP
.sp
Phonet connection for Nokia phones.
.TP
.B \fBblueat\fP
.sp
AT commands connection for most of phones.
.TP
.B \fBblueobex\fP
.sp
OBEX (IrMC or file transfer) connection for most of phones.
.TP
.B \fBbluerfgnapbus\fP
.sp
GNapplet based connection for Symbian phones
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B Device
.
New in version 1.27.95.
.sp
Device node or address of phone. It depends on used connection.
.sp
For \fBcables\fP or emulated serial ports, you enter device name (for example
\fB/dev/ttyS0\fP, \fB/dev/ttyACM0\fP, \fB/dev/ircomm0\fP, \fB/dev/rfcomm0\fP on Linux,
\fB/dev/cuad0\fP on FreeBSD or COM1: on Windows). The special exception are
DKU\-2 and DKU\-5 cables on Windows, where the device is automatically detected
from driver information and this parameters is ignored.
.sp
For \fBUSB\fP connections (currently only fbususb and dku2 on Linux), you can
specify to which USB device Gammu should connect. You can either provide
vendor/product IDs or device address on USB:
.sp
.nf
.ft C
Device = 0x1234:0x5678  # Match device by vendor and product id
Device = 0x1234:\-1      # Match device by vendor id
Device = 1.10           # Match device by usb bus and device address
Device = 10             # Match device by usb device address
Device = serial:123456  # Match device by serial string
.ft P
.fi
.sp
For \fBBluetooth\fP connection you have to enter Bluetooth address of your phone
(you can list Bluetooth devices in range on Linux using \fBhcitool scan\fP
command). Optionally you can also force Gammu to use specified channel by
including channel number after slash.
.sp
Before using Gammu, your device should be paired with computer or you should
have set up automatic pairing.
.sp
For \fBIrDA\fP connections, this parameters is not used at all.
.sp
If IrDA does not work on Linux, you might need to bring up the interface and
enable discovery (you need to run these commands as root):
.sp
.nf
.ft C
ip l s dev irda0 up
sysctl net.irda.discovery=1
.ft P
.fi
.IP Note
.
On Linux systems, you might lack permissions for some device nodes.
You might need to be member of some group (eg. \fBplugdev\fP or
\fBdialout\fP) or or add special udev rules to enable you access
these devices as non\-root.
.sp
For Nokia phones you can put follofing file (also available in sources
as \fBcontrib/udev/45\-nokiadku2.rules\fP) as
\fB/etc/udev/rules.d/45\-nokiadku2.rules\fP:
.sp
.nf
.ft C
# udev rules file for nokia dku2 devices (udev >= 0.98)
# Put it to /etc/udev/rules.d/ directory
# Taken from http://git.savannah.gnu.org/cgit/gnokii.git/tree/Docs/sample/45\-nokiadku2.rules
#

ACTION!="add", GOTO="nokiadku2_rules_end"
SUBSYSTEM=="usb", GOTO="nokiadku2_rules"
# This one is for the old kernels
SUBSYSTEM=="usb_device", GOTO="nokiadku2_rules"
GOTO="nokiadku2_rules_end"

LABEL="nokiadku2_rules"
ATTRS{manufacturer}=="Nokia", MODE="0660", GROUP="plugdev"

LABEL="nokiadku2_rules_end"

.ft P
.fi
.RE
.UNINDENT
.INDENT 0.0
.TP
.B Port
.
Deprecated since version 1.27.95.
.sp
Alias for Device, kept for backward compatibility.
.UNINDENT
.INDENT 0.0
.TP
.B Model
.
Do not use this parameter unless really needed! The only use case for this is
when Gammu does not know your phone and misdetects it\(aqs features.
.sp
The only special case for using model is to force special type of OBEX
connection instead of letting Gammu try the best suited for selected
operation:
.INDENT 7.0
.TP
.B \fBobexfs\fP
.sp
force using of file browsing service (file system support)
.TP
.B \fBobexirmc\fP
.sp
force using of IrMC service (contacts, calendar and notes support)
.TP
.B \fBobexnone\fP
.sp
none service chosen, this has only limited use for sending file (\fBsendfile\fP command)
.TP
.B \fBmobex\fP
.sp
m\-obex service for Samsung phones
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B Use_Locking
.
On Posix systems, you might want to lock serial device when it is being used
using UUCP\-style lock files. Enabling this option (setting to yes) will make
Gammu honor these locks and create it on startup. On most distributions you
need additional privileges to use locking (eg. you need to be member of uucp
group).
.sp
This option has no meaning on Windows.
.UNINDENT
.SS Connection options
.INDENT 0.0
.TP
.B SynchronizeTime
.
If you want to set time from computer to phone during starting connection.
.UNINDENT
.INDENT 0.0
.TP
.B StartInfo
.
This option allow to set, that you want (setting \fByes\fP) to see message on the
phone screen or phone should enable light for a moment during starting
connection. Phone will not beep during starting connection with this
option. This works only with some Nokia phones.
.UNINDENT
.SS Debugging options
.INDENT 0.0
.TP
.B LogFile
.
Path to file where information about communication will be stored.
.IP Note
.
For most debug levels (excluding \fBerrors\fP) the log file is overwritten on
each execution.
.RE
.UNINDENT
.INDENT 0.0
.TP
.B LogFormat
.
Determines what all will be logged to \fBLogFile\fP. Possible values are:
.INDENT 7.0
.TP
.B \fBnothing\fP
.sp
no debug level
.TP
.B \fBtext\fP
.sp
transmission dump in text format
.TP
.B \fBtextall\fP
.sp
all possible info in text format
.TP
.B \fBtextalldate\fP
.sp
all possible info in text format, with time stamp
.TP
.B \fBerrors\fP
.sp
errors in text format
.TP
.B \fBerrorsdate\fP
.sp
errors in text format, with time stamp
.TP
.B \fBbinary\fP
.sp
transmission dump in binary format
.UNINDENT
.sp
For debugging use either \fBtextalldate\fP or \fBtextall\fP, it contains all
needed information to diagnose problems.
.UNINDENT
.INDENT 0.0
.TP
.B Features
.
Custom features for phone. This can be used as override when values coded
in \fBcommon/gsmphones.c\fP are bad or missing. Consult
\fBinclude/gammu\-info.h\fP for possible values (all GSM_Feature values
without leading \fBF_\fP prefix). Please report correct values to Gammu
authors.
.UNINDENT
.SS Locales and character set options
.INDENT 0.0
.TP
.B GammuCoding
.
Forces using specified codepage (for example \fB1250\fP will force CP\-1250 or
\fButf8\fP for UTF\-8). This should not be needed, Gammu detects it according
to your locales.
.UNINDENT
.INDENT 0.0
.TP
.B GammuLoc
.
Path to directory with localisation files (the directory should contain
\fBLANG/LC_MESSAGES/gammu.mo\fP). If gammu is properly installed it should find
these files automatically.
.UNINDENT
.SH EXAMPLES
.sp
There is more complete example available in Gammu documentation.
.SS Connection examples
.sp
Gammu configuration for Nokia phone using DLR\-3 cable:
.sp
.nf
.ft C
[gammu]
device = /dev/ttyACM0
connection = dlr3
.ft P
.fi
.sp
Gammu configuration for Sony\-Ericsson phone (or any other AT compatible
phone) connected using USB cable:
.sp
.nf
.ft C
[gammu]
device = /dev/ttyACM0
connection = at
.ft P
.fi
.sp
Gammu configuration for Sony\-Ericsson (or any other AT compatible
phone) connected using bluetooth:
.sp
.nf
.ft C
[gammu]
device = B0:0B:00:00:FA:CE
connection = blueat
.ft P
.fi
.sp
Gammu configuration for phone which needs to manually adjust Bluetooth channel to use channel 42:
.sp
.nf
.ft C
[gammu]
device = B0:0B:00:00:FA:CE/42
connection = blueat
.ft P
.fi
.SS Working with multiple phones
.sp
Gammu can be configured for multiple phones (however only one connection
is used at one time, you can choose which one to use with \fB\-\-section\fP
parameter). Configuration for phones on three serial ports would look
like following:
.sp
.nf
.ft C
[gammu]
device = /dev/ttyS0
connection = at

[gammmu1]
device = /dev/ttyS1
connection = at

[gammmu2]
device = /dev/ttyS2
connection = at
.ft P
.fi
.SH AUTHOR
Michal Čihař <michal@cihar.com>
.SH COPYRIGHT
2009-2010, Michal Čihař <michal@cihar.com>
.\" Generated by docutils manpage writer.
.\" 
.
