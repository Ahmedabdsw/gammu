const version="GammuGUI v. 0.0.12  "
dim Debug[6]
dim DebugTypes[6]
DebugTypes[1]="nothing"
DebugTypes[2]="text"
DebugTypes[3]="textall"
DebugTypes[4]="errors"
DebugTypes[5]="binary"

dim Reset[8]
dim ResetTypes[8]
ResetTypes[1]="PHONE"
ResetTypes[2]="DEV"
ResetTypes[3]="UIF"
ResetTypes[4]="ALL"
ResetTypes[5]="FACTORY"
ResetTypes[6]="SOFT"
ResetTypes[7]="HARD"

dim SMSDurationRadio[7]
dim SMSDurationTypes[7]
SMSDurationTypes[1]="HOUR"
SMSDurationTypes[2]="6HOURS"
SMSDurationTypes[3]="DAY"
SMSDurationTypes[4]="3DAYS"
SMSDurationTypes[5]="WEEK"
SMSDurationTypes[6]="MAX"

Global DebugLevel="nothing"
Global ResetParamSettings, ResetParamPhone

Global SMSText$=" ", SMSClass0$=" ",SMSFax$=" ",SMSMail$=" ",SMSVoice$=" "
Global SMSRead$=" ",SMSSent$=" ",SMSVoid$=" ",SMSCSet$=" ",SMSCNumber$=" "
Global SMSLen$=" ",SMSAutoLen$=" ",SMSReply$=" ",SMSDuration$=" ",SMSFrom$=" ",SMSTo$=" "
Global SMSReport$=" ",SMSUnicode$=" ",SMSInputUnicode$=" "


	' Create main window
frame=New wxFrame(0,-1,version)
frame.SetSize(640,441) 	
frame.Center
	' rem Show window


' create a "File" menu and append an item
mFile = wxMenu.new()
mFile.Append( wxID_EXIT, "E&xit\tAlt-X", "Quit this program")

' create an "About" menu and append an item
mHelp = wxMenu.new()
mHelp.Append( wxID_ABOUT, "&About...", "Show about dialog")
mHelp.Append( wxID_HELP, "&Help...", "Show help")

' now append the freshly created menu to the menu bar...
menuBar = wxMenuBar.new()
menuBar.Append(mFile, "&File")
menuBar.Append(mHelp, "&Help")

' ... and attach this menu bar to the frame
frame.SetMenuBar(menuBar)

' create a status bar
frame.CreateStatusBar(2)
frame.SetStatusText("GAMMU command line",0)

' callback for the Quit menu option
function OnQuit( event )
    ' TRUE is to force the frame to close
    frame.Close(True)
end function
connect( frame, wxID_EXIT, wxEVT_COMMAND_MENU_SELECTED, "OnQuit" )



// callback for the About menu option
function OnAbout( event )
    msg = "GAMMU GUI by Luca Cassioli 2003 - BETA VERSION \n"
    msg=msg+"Written in wxBasic, portable to Windows, Linux,...\n"
    msg=msg+"If you are a BASIC programmer, you can help me developing \n"
    msg=msg+"this OPENSOURCE program: write me at cassioli@iol.it.\n\n"
    msg=msg+"Versions information:\n"
    msg=msg+"First number:   number of complete version (not beta)\n"
    msg=msg+"Second number:  number of released version\n"
    msg=msg+"Third number:   number of internal version (only on my hard disk)\n"
    msg=msg+"Example: if 0.0.3 is my latest internal versions,I'll release it\n"
    msg=msg+"as v. 0.1.3 if it isn't complete yet. If it is complete (all panels\n"
    msg=msg+"present and all commands implemented), I'll release it as v. 1.1.3;\n"
    msg=msg+"then, I'll work on 0.0.4, 0.0.5,... till next release.\n"
    wxMessageBox( msg, "About GammuGUI", wxOK + wxICON_INFORMATION, frame )
end function
connect( frame, wxID_ABOUT, wxEVT_COMMAND_MENU_SELECTED, "OnAbout" )

// callback for the HELP menu option
function OnHelp( event )
    msg = "This program is a Graphical User Interface (GUI) for the\n"
    msg=msg+"program GAMMU (http://marcin-wiacek.fkn.pl/english/),\n"
    msg=msg+"which allows connecting a PC to a mobile phone (several\n"
    msg=msg+"brands supported: Nokia, Alacatel, Siemens...).\n"
    msg=msg+"\nFor more info about GAMMU, please visit the above site.\n"
    msg=msg+"\n If you want to contribute to the writing of this GUI,\n"
    msg=msg+"please contact me at cassioli@iol.it.\n"
    msg=msg+"\n\nThis program is written in wxBasic (http://wxbasic.sourceforge.net/),\n"
    msg=msg+"an opensource Basic implementation of wxWindows opensource \n"
    msg=msg+"libraries. (http://www.wxwindows.org).\n"
    wxMessageBox( msg, "GammuGUI HELP", wxOK + wxICON_INFORMATION, frame )
end function
connect( frame, wxID_HELP, wxEVT_COMMAND_MENU_SELECTED, "OnHelp" )


frame.Show(True)	

	' Add a panel to main window
panel=new wxPanel(frame,-1,wxPoint(0,0),wxSize(640,276))
	' Add several tabs	
Tabs = new wxNotebook( panel, -1, wxPoint(10,10), wxSize(620,250) ) 
	' Create new panel: it will contain generic GAMMU functions
tabMain = new wxPanel(Tabs, -1)	
	' Previously created panel is associated to first tab
Tabs.AddPage( tabMain, "Main" ) 
	' other tabs...
tabConfig = new wxPanel(Tabs, -1)	
Tabs.AddPage( tabConfig, "Phone config" )

tabSMS = new wxPanel(Tabs, -1)	
Tabs.AddPage( tabSMS, "SMS" )

tabLogo = new wxPanel(Tabs, -1)
Tabs.AddPage( tabLogo, "Logo" )

tabRingtones = new wxPanel(Tabs, -1)
Tabs.AddPage( tabRingtones, "Ringtones" )

tabBackup = new wxPanel(Tabs, -1)
Tabs.AddPage( tabBackup, "Backup phone data" )

tabAdvanced = new wxPanel(Tabs, -1)
Tabs.AddPage( tabAdvanced, "Advanced" )

	' Create a window for GAMMU output, and make it not-editable
OutputText = new wxTextCtrl(frame, -1, "", wxPoint(0,276),wxSize( 633, 100 ), wxTE_MULTILINE | wxVSCROLL )
OutputText.SetEditable(False) 

	' Create groupbox for containg Phone specs (--identify)
BoxPhoneSpecs=New wxStaticBox(tabMain,-1,"Phone specs",wxPoint(300,10),wxSize(300,150),1,"") ' Phone specs box
	' Button to start phone identifying
button= New wxButton(tabMain,-1,"Identify",wxPoint(415,165)) ' --identify

	' Create groupbox for containg DEBUG options
BoxDebug=New wxStaticBox(tabMain,-1,"Gammu debug level",wxPoint(10,10),wxSize(110,130),1,"") 
Debug[1]= new wxRadioButton( tabMain, -1, "Nothing",wxPoint(30,30) )
Debug[2]= new wxRadioButton( tabMain, -1, "text",wxPoint(30,50) )
Debug[3]= new wxRadioButton( tabMain, -1, "textall",wxPoint(30,70) )
Debug[4]= new wxRadioButton( tabMain, -1, "errors",wxPoint(30,90) )
Debug[5]= new wxRadioButton( tabMain, -1, "binary",wxPoint(30,110) )


'test=New wxRadioBox(tabMain,-1,"Debug level",wxPoint(130,10),wxSize(130,100),2,c[1],1)
'buttonHelp= New wxButton(tabMain,-1,"Gammu commands",wxPoint(10,170))

test= New wxStaticText(frame,-1,"GAMMU output",wxPoint(270,262),wxSize(77,15),1,"")
test.SetBackgroundColor(wxColor(0xffff,0xffff,0xffff))


' Dialog used for Open/Save/Save As
    Common fileDialog = new wxFileDialog( frame )

function GammuShowOutput()
OutputText.Clear
' shell("gammu "+DebugLevel+" "+param$+" > gammu.tmp")
 open "gammu.tmp" for input as #1
conta=0
 While (Not Eof( 1 )) And (conta<100)
  conta=conta+1
  Line Input #1,riga
  OutputText.AppendText(riga+chr$(13))
 End While
 Close(1)
end function

' --IDENTIFY
function Identify(event)
	OutputText.Clear
	frame.SetStatusText("gammu "+DebugLevel+" --identify > gammu.tmp",1)
	shell("gammu "+DebugLevel+" --identify > gammu.tmp")
	 open "gammu.tmp" for input as #1
	conta=0
 	While (Not Eof( 1 )) And (conta<100)
  		conta=conta+1
  		Line Input #1,riga
  		OutputText.AppendText(riga+chr$(13))
		if len(riga)<40 then
	 		test=New wxStaticText(tabMain,-1,riga,wxPoint(310,10+conta*15),wxSize(250,15),1,"")
 		end if
 	End While
 Close(1)
end function
connect (button,wxEVT_COMMAND_BUTTON_CLICKED,"Identify")

'function help(event)
'	GammuShowOutput("--help")
'end function
'connect (buttonHelp,wxEVT_COMMAND_BUTTON_CLICKED,"help")


	' Create groupbox for SETTINGS RESET options
PanelReset=New wxPanel(tabMain,-1,wxPoint(135,10),wxSize(115,130))
BoxReset=New wxStaticBox(PanelReset,-1,"Reset phone settings",wxPoint(0,0),wxSize(115,130),1,"") 
Reset[1]= new wxRadioButton( PanelReset, -1, "PHONE",wxPoint(10,20) )
Reset[2]= new wxRadioButton( PanelReset, -1, "DEV",wxPoint(10,40) )
Reset[3]= new wxRadioButton( PanelReset, -1, "UIF",wxPoint(10,60) )
Reset[4]= new wxRadioButton( PanelReset, -1, "ALL",wxPoint(10,80) )
Reset[5]= new wxRadioButton( PanelReset, -1, "FACTORY",wxPoint(10,100) )
ResetSettingsButton = new wxButton( PanelReset, -1,"GO!",wxPoint(63,40),wxSize(40,40))

	' Create groupbox for PHONE RESET options
PanelResetPhone=New wxPanel(tabMain,-1,wxPoint(135,140),wxSize(115,130))
BoxReset=New wxStaticBox(PanelResetPhone, -1,"Phone reset",wxPoint(0,0),wxSize(115,60),1,"") 
Reset[6]= new wxRadioButton( PanelResetPhone, -1, "SOFT",wxPoint(10,15) )
Reset[7]= new wxRadioButton( PanelResetPhone, -1, "HARD",wxPoint(10,35) )
ResetPhoneButton = new wxButton( PanelResetPhone, -1,"GO!",wxPoint(63,17),wxSize(40,35))

Function DebugClicked( event )
 for x = 1 to 5
 	if Debug[x].GetValue()=1 then 
 		DebugLevel=DebugTypes[x]
 	end if
 next
End Function
Connect( Debug[1],wxEVT_COMMAND_RADIOBUTTON_SELECTED, "DebugClicked" )
Connect( Debug[2],wxEVT_COMMAND_RADIOBUTTON_SELECTED, "DebugClicked" )
Connect( Debug[3],wxEVT_COMMAND_RADIOBUTTON_SELECTED, "DebugClicked" )
Connect( Debug[4],wxEVT_COMMAND_RADIOBUTTON_SELECTED, "DebugClicked" )
Connect( Debug[5],wxEVT_COMMAND_RADIOBUTTON_SELECTED, "DebugClicked" )

Function ResetSettingsClicked( event )
 for x= 1 to 5
	if Reset[x].GetValue()=1 then
		ResetParamSettings=ResetTypes[x]
	end if
 next
End Function
Connect( Reset[1],wxEVT_COMMAND_RADIOBUTTON_SELECTED, "ResetSettingsClicked" )
Connect( Reset[2],wxEVT_COMMAND_RADIOBUTTON_SELECTED, "ResetSettingsClicked" )
Connect( Reset[3],wxEVT_COMMAND_RADIOBUTTON_SELECTED, "ResetSettingsClicked" )
Connect( Reset[4],wxEVT_COMMAND_RADIOBUTTON_SELECTED, "ResetSettingsClicked" )
Connect( Reset[5],wxEVT_COMMAND_RADIOBUTTON_SELECTED, "ResetSettingsClicked" )

Function ResetPhoneClicked( event )
 for x= 6 to 7
 	if Reset[x].GetValue()=1 then
 		ResetParamPhone=ResetTypes[x]
 	end if
 next
End Function
Connect( Reset[6],wxEVT_COMMAND_RADIOBUTTON_SELECTED, "ResetPhoneClicked" )
Connect( Reset[7],wxEVT_COMMAND_RADIOBUTTON_SELECTED, "ResetPhoneClicked" )

' --RESETPHONESETTINGS
function ResetSettings (event)
 OutputText.Clear
 frame.SetStatusText("gammu "+DebugLevel+" --resetphonesettings "+ResetParamSettings+ " > gammu.tmp",1)
 test=wxMessageBox("WARNING! PHONE IS GOING TO BE RESET! ARE YOU SURE?","Phone reset warning", 255 ,frame) 
 if test=4 then
    shell("gammu "+DebugLevel+" --resetphonesettings "+ResetParamSettings+ " > gammu.tmp")
    GammuShowOutput
 end if
end function
Connect( ResetSettingsButton, wxEVT_COMMAND_BUTTON_CLICKED, "ResetSettings" )

' --RESET
function ResetPhone (event)
 OutputText.Clear
 frame.SetStatusText("gammu "+DebugLevel+" --reset "+ResetParamPhone+ " > gammu.tmp",1)
 test=wxMessageBox("WARNING! PHONE IS GOING TO BE RESET! ARE YOU SURE?","Phone reset warning", 255 ,frame) 
 if test=4 then
    shell("gammu "+DebugLevel+" --reset "+ResetParamPhone+ " > gammu.tmp")
    GammuShowOutput
 end if
end function
Connect( ResetPhoneButton, wxEVT_COMMAND_BUTTON_CLICKED, "ResetPhone" )


'***** SMS SECTION *****
'GetAllSMSButton = New wxButton(tabSMS,-1,"Backup sms",wxPoint(500,10))
GetAllSMSButton2 = New wxButton(tabBackup,-1,"Backup sms",wxPoint(10,10))
BackupButton = New wxButton(tabBackup,-1,"Backup phone settings",wxPoint(10,40))
RestoreSMSButton = New wxButton(tabBackup,-1,"Restore sms",wxPoint(350,10))
RestoreSettingsButton = New wxButton(tabBackup,-1,"Restore settings",wxPoint(350,40))


SMSTextLabel=new wxStaticText(tabSMS,-1,"Message text",wxPoint(42,7))
SMSText=New wxTextCtrl(tabSMS,-1,"",wxPoint(10,20),wxSize(140,90),wxTE_MULTILINE | wxVSCROLL)

'SMS options panel
SMSOptionBox=New wxStaticBox(tabSMS, -1,"Special options",wxPoint(5,110),wxSize(180,110),1,"") 
SMSClass0CheckBox = new wxCheckBox(tabSMS,-1,"Class 0 (blinking)",wxPoint(10,122))
SMSVoidCheckBox = new wxCheckBox(tabSMS,-1,"Void message",wxPoint(10,138))

SMSOptionsLabel=new wxStaticText(tabSMS,-1,"On  Off",wxPoint(144,154),wxSize(35,18))

SMSFaxCheckBoxPanel=new wxPanel(tabSMS,-1,wxPoint(10,165),wxSize(170,18))
SMSFaxCheckBox = new wxCheckBox(SMSFaxCheckBoxPanel,-1,"Fax indicator",wxPoint(0,0))
SMSFaxRadioOn=new wxRadioButton(SMSFaxCheckBoxPanel,-1,"",wxPoint(135,0))
SMSFaxRadioOff=new wxRadioButton(SMSFaxCheckBoxPanel,-1,"",wxPoint(155,00))

SMSMailCheckBoxPanel=new wxPanel(tabSMS,-1,wxPoint(10,183),wxSize(170,18))
SMSMailCheckBox = new wxCheckBox(SMSMailCheckBoxPanel,-1,"Mail indicator",wxPoint(0,0))
SMSMailRadioOn=new wxRadioButton(SMSMailCheckBoxPanel,-1,"",wxPoint(135,0))
SMSMailRadioOff=new wxRadioButton(SMSMailCheckBoxPanel,-1,"",wxPoint(155,0))

SMSVoiceCheckBoxPanel=new wxPanel(tabSMS,-1,wxPoint(10,201),wxSize(170,18))
SMSVoiceCheckBox = new wxCheckBox(SMSVoiceCheckBoxPanel,-1,"Voice indicator",wxPoint(0,0))
SMSVoiceRadioOn=new wxRadioButton(SMSVoiceCheckBoxPanel,-1,"",wxPoint(135,0))
SMSVoiceRadioOff=new wxRadioButton(SMSVoiceCheckBoxPanel,-1,"",wxPoint(155,0))

'SMS flags panel
SMSFlagBox=New wxStaticBox(tabSMS, -1,"Saved message flags",wxPoint(190,110),wxSize(120,110),1,"") 
SMSReadCheckBoxPanel=new wxPanel(tabSMS,-1,wxPoint(195,145),wxSize(100,20))
SMSReadCheckBox = new wxCheckBox(SMSReadCheckBoxPanel,-1,"Read",wxPoint(0,0))
SMSReadRadioOn   = new wxRadioButton(SMSReadCheckBoxPanel,-1,"",wxPoint(65,0))
SMSReadRadioOff   = new wxRadioButton(SMSReadCheckBoxPanel,-1,"",wxPoint(85,0))
SMSSentCheckBoxPanel=new wxPanel(tabSMS,-1,wxPoint(195,175),wxSize(100,20))
SMSSentCheckBox = new wxCheckBox(SMSSentCheckBoxPanel,-1,"Sent",wxPoint(0,0))
'SMSSentRadioOn=new wxRadioButton(SMSSentCheckBoxPanel,-1,"",wxPoint(65,0))
'SMSSentRadioOff=new wxRadioButton(SMSSentCheckBoxPanel,-1,"",wxPoint(85,0))



'Sender number
SMSFromLabel=new wxStaticText(tabSMS,-1,"From:",wxPoint(200,5))
SMSFromText=new wxTextCtrl(tabSMS,-1,"",wxPoint(195,20),wxSize(100,20), wxTE_MULTILINE )
SMSFromText.SetEditable(False)
SMSFromText.Enable(False)
'Destination number
SMSDestLabel=new wxStaticText(tabSMS,-1,"To:",wxPoint(320,5))
SMSRecipientText=new wxTextCtrl(tabSMS,-1,"",wxPoint(315,20),wxSize(100,20))

'SMS Center parameters
SMSCPanel=new wxPanel(tabSMS,-1,wxPoint(190,50),wxSize(260,60))
SMSCStaticBox=new wxStaticBox(SMSCPanel,-1,"SMSC settings",wxPoint(0,0),wxSize(260,60))
SMSCSetRadio=new wxRadioButton(SMSCPanel,-1,"SMSC n. from set: ",wxPoint(5,15))
SMSCSetText=new wxTextCtrl(SMSCPanel,-1,"",wxPoint(150,15),wxSize(80,20))
SMSCNumberRadio=new wxRadioButton(SMSCPanel,-1,"SMSC number: ",wxPoint(5,35))
SMSCNumberText=new wxTextCtrl(SMSCPanel,-1,"",wxPoint(150,35),wxSize(80,20))

'SMS other parameters
SMSOtherStaticBox=new wxStaticBox(tabSMS,-1,"Other settings",wxPoint(320,110),wxSize(130,110))
SMSLenRadio=new wxRadioButton(tabSMS,-1,"len: ",wxPoint(330,125))
SMSLenText=new wxTextCtrl(tabSMS,-1,"",wxPoint(400,125),wxSize(40,20))
SMSAutoLenRadio=new wxRadioButton(tabSMS,-1,"autolen: ",wxPoint(330,145))
SMSAutoLenText=new wxTextCtrl(tabSMS,-1,"",wxPoint(400,145),wxSize(40,20))
SMSReplyCheckBox = new wxCheckBox(tabSMS,-1,"Reply",wxPoint(340,170))
SMSReportCheckBox = new wxCheckBox(tabSMS,-1,"Delivery report",wxPoint(340,190))

'SMS duration panel
SMSDurationPanel=new wxPanel(tabSMS,-1,wxPoint(460,5),wxSize(130,80))
SMSDurationStaticBox=new wxStaticBox(SMSDurationPanel,-1,"SMS duration",wxPoint(0,0),wxSize(130,80))
SMSDurationRadio[1]=new wxRadioButton(SMSDurationPanel,-1,"1 hour",wxPoint(5,15))
SMSDurationRadio[2]=new wxRadioButton(SMSDurationPanel,-1,"6 hour",wxPoint(65,15))
SMSDurationRadio[3]=new wxRadioButton(SMSDurationPanel,-1,"1 day",wxPoint(5,35))
SMSDurationRadio[4]=new wxRadioButton(SMSDurationPanel,-1,"3 days",wxPoint(65,35))
SMSDurationRadio[5]=new wxRadioButton(SMSDurationPanel,-1,"1 week",wxPoint(5,55))
SMSDurationRadio[6]=new wxRadioButton(SMSDurationPanel,-1,"max",wxPoint(65,55))

SMSOther2StaticBox=new wxStaticBox(tabSMS,-1,"",wxPoint(460,85),wxSize(130,80))
SMSUnicodeCheckBox = new wxCheckBox(tabSMS,-1,"Unicode",wxPoint(470,100))
SMSInputUnicodeCheckBox = new wxCheckBox(tabSMS,-1,"Input unicode",wxPoint(470,135))

SMSSendButton = New wxButton(tabSMS,-1,"Send",wxPoint(470,170))
SMSSaveButton = New wxButton(tabSMS,-1,"Save to phone",wxPoint(465,200))
SMSOtherButton=New wxButton(tabSMS,-1,"Other...",wxPoint(555,170),wxSize(50,50))


function BackupSMS ( event )
	OutputText.Clear
	frame.SetStatusText("gammu "+DebugLevel+" --backupsms smsback.txt > gammu.tmp",1)
	shell("gammu "+DebugLevel+" --backupsms smsback.txt > gammu.tmp")
	GammuShowOutput
end function
'connect( GetAllSMSButton, wxEVT_COMMAND_BUTTON_CLICKED, "BackupSMS")
connect( GetAllSMSButton2, wxEVT_COMMAND_BUTTON_CLICKED, "BackupSMS")

function BackupSettings ( event )
	OutputText.Clear
	frame.SetStatusText("gammu "+DebugLevel+" --backup settback.txt > gammu.tmp",1)
	shell("gammu "+DebugLevel+" --backup settback.txt > gammu.tmp")
	GammuShowOutput
end function
connect( BackupButton, wxEVT_COMMAND_BUTTON_CLICKED, "BackupSettings")

function RestoreSMS ( event )
	OutputText.Clear
	frame.SetStatusText("gammu "+DebugLevel+" --restore smsback.txt > gammu.tmp",1)
	shell("gammu "+DebugLevel+" --restore smsback.txt > gammu.tmp")
	GammuShowOutput
end function
connect( RestoreSMSButton, wxEVT_COMMAND_BUTTON_CLICKED, "RestoreSMS")

function RestoreSettings ( event )
	OutputText.Clear
	frame.SetStatusText("gammu "+DebugLevel+" --restore backup.txt > gammu.tmp",1)
	shell("gammu "+DebugLevel+" --restore backup.txt > gammu.tmp")
	GammuShowOutput
end function
connect( RestoreSettingsButton, wxEVT_COMMAND_BUTTON_CLICKED, "RestoreSettings")

function SendSMS ( event )
	SMSText.SaveFile("sms.txt")  ' Save message text to a file
	OutputText.Clear
	SMSFrom=SMSFromText.GetLineText(0)
	SMSTo=SMSRecipientText.GetLineText(0)
    if len(SMSLenText.GetLineText(0))>0  and (SMSLenRadio.GetValue()=1)then
		SMSLen$=" -len "+SMSLenText.GetLineText(0)
	else
		SMSLen$=" "
	end if
	if len(SMSAutoLenText.GetLineText(0))>0 and (SMSAutoLenRadio.GetValue()=1) then
		SMSAutoLen$=" -autolen "+SMSAutoLenText.GetLineText(0)
    else
		SMSAutoLen$=" "
	end if
	if len(SMSCSetText.GetLineText(0))>0  and (SMSCSetRadio.GetValue()=1) then 
		SMSCSet$=" -smscset "+SMSCSetText.GetLineText(0)
	else
		SMSCSet$=" "
	end if
	if len(SMSCNumberText.GetLineText(0))>0  and (SMSCNumberRadio.GetValue()=1) then
		SMSCNumber$="-smscnumber "+SMSCNumberText.GetLineText(0)
	else
		SMSCNumber$=" "
	end if
	param="gammu "+DebugLevel+" --sendsms TEXT "+SMSTo
	if len(SMSFrom)>0 then 
		param=param+" -sender "+SMSFrom
	end if
	if SMSUnicodeCheckBox.GetValue()=1 then
		SMSUnicode$=" -unicode "
	else
		SMSUnicode$=" "
	end if
	if SMSInputUnicodeCheckBox.GetValue()=1 then
		SMSInputUnicode$=" -inputunicode "
	else
		SMSInputUnicode$=" "
	end if
	param=param+SMSReply$+SMSClass0$+SMSFax$+SMSVoice$+SMSMail$+SMSReport$+SMSVoid$
	param=param+SMSUnicode$+SMSInputUnicode$
	param=param+SMSLen$+SMSAutoLen$+SMSCSet$+SMSCNumber$
	param=param+SMSUnicode$+SMSInputUnicode$
	param=param+" -validity "+SMSDuration$
	param=param+" < sms.txt"  ' Read SMS text from file
	wxMessageBox( param, "DEBUG", wxOK + wxICON_INFORMATION, frame )
	frame.SetStatusText(param,1)
	shell(param+" > gammu.tmp")
	GammuShowOutput
end function
Connect( SMSSendButton,wxEVT_COMMAND_BUTTON_CLICKED, "SendSMS" )

Function SaveSMS ( event )
	SMSText.SaveFile("sms.txt")  ' Save message text to a file
	OutputText.Clear
	SMSFrom=SMSFromText.GetLineText(0)
	SMSTo=SMSRecipientText.GetLineText(0)
	param="gammu "+DebugLevel+" --sendsms TEXT "+SMSTo
	if len(SMSFrom)>0 then 
		param=param+" -sender "+SMSFrom
	end if
	param=param+SMSReply$+SMSClass0$+SMSFax$+SMSVoice$+SMSMail$+SMSReport$+SMSVoid$
	param=param+SMSUnicode$+SMSInputUnicode$+SMSRead$+SMSSent$
	'param=param+" -validity "+SMSDuration$
	param=param+" < sms.txt"  ' Read SMS text from file
	wxMessageBox( param, "DEBUG", wxOK + wxICON_INFORMATION, frame )
	frame.SetStatusText(param,1)
	shell(param+" > gammu.tmp")
	GammuShowOutput
end function
Connect( SMSSaveButton,wxEVT_COMMAND_BUTTON_CLICKED, "SaveSMS" )

Function OtherSMSCommands ( event )
msg="Commands to be implemented:\n"
msg=msg+"gammu --getsms folder start [stop]\n"
msg=msg+"gammu --deletesms folder start [stop]\n"
msg=msg+"gammu --deleteallsms folder\n"
msg=msg+"gammu --getallsms\n"
msg=msg+"gammu --geteachsms\n"
msg=msg+"gammu --getsmsc start [stop]\n"
msg=msg+"gammu --getsmsfolders\n"
msg=msg+"gammu --smsd FILES configfile\n"
 wxMessageBox( msg, "Developing...", wxOK + wxICON_INFORMATION, frame )
end function
Connect( SMSOtherButton,wxEVT_COMMAND_BUTTON_CLICKED, "OtherSMSCommands" )

Function SMSDurationClicked( event )
 for x= 1 to 6
 	if SMSDurationRadio[x].GetValue()=1 then
 		SMSDuration$=SMSDurationTypes[x]
 	end if
 next
End Function
Connect( SMSDurationRadio[1],wxEVT_COMMAND_RADIOBUTTON_SELECTED, "SMSDurationClicked" )
Connect( SMSDurationRadio[2],wxEVT_COMMAND_RADIOBUTTON_SELECTED, "SMSDurationClicked" )
Connect( SMSDurationRadio[3],wxEVT_COMMAND_RADIOBUTTON_SELECTED, "SMSDurationClicked" )
Connect( SMSDurationRadio[4],wxEVT_COMMAND_RADIOBUTTON_SELECTED, "SMSDurationClicked" )
Connect( SMSDurationRadio[5],wxEVT_COMMAND_RADIOBUTTON_SELECTED, "SMSDurationClicked" )
Connect( SMSDurationRadio[6],wxEVT_COMMAND_RADIOBUTTON_SELECTED, "SMSDurationClicked" )

Function SMSClass0Checked ( event )
	if SMSClass0CheckBox.GetValue()=1 then
		SMSClass0$=" -flash "
	else
		SMSClass0$=" "
	end if
end function
connect (SMSClass0CheckBox,wxEVT_COMMAND_CHECKBOX_CLICKED, "SMSClass0Checked")

Function SMSFaxChecked ( event )
	if SMSFaxCheckBox.GetValue()=1 and SMSFaxRadioOn.GetValue()=1 then
			SMSFax$=" -enablefax "
	end if
	if SMSFaxCheckBox.GetValue()=1 and SMSFaxRadioOff.GetValue()=1 then
			SMSFax$=" -disablefax "
	end if
    if SMSFaxCheckBox.GetValue()=0 then
		SMSFax$="  "
	end if
end function
connect (SMSFaxCheckBox,wxEVT_COMMAND_CHECKBOX_CLICKED, "SMSFaxChecked")

Function SMSFaxRadio ( event )
	SMSFaxCheckBox.SetValue(1)
	SMSFaxChecked(-1)
end function
connect (SMSFaxRadioOn,wxEVT_COMMAND_RADIOBUTTON_SELECTED, "SMSFaxRadio")
connect (SMSFaxRadioOff,wxEVT_COMMAND_RADIOBUTTON_SELECTED, "SMSFaxRadio")

Function SMSMailChecked ( event )
	if SMSMailCheckBox.GetValue()=1 and SMSMailRadioOn.GetValue()=1 then
			SMSMail$=" -enableemail "
	end if
	if SMSMailCheckBox.GetValue()=1 and SMSMailRadioOff.GetValue()=1 then
			SMSMail$=" -disableemail "
	end if
    if SMSMailCheckBox.GetValue()=0 then
		SMSMail$="  "
	end if
end function
connect (SMSMailCheckBox,wxEVT_COMMAND_CHECKBOX_CLICKED, "SMSMailChecked")

Function SMSMailRadio ( event )
	SMSMailCheckBox.SetValue(1)
	SMSMailChecked(-1)
end function
connect (SMSMailRadioOn,wxEVT_COMMAND_RADIOBUTTON_SELECTED, "SMSMailRadio")
connect (SMSMailRadioOff,wxEVT_COMMAND_RADIOBUTTON_SELECTED, "SMSMailRadio")


Function SMSVoiceChecked ( event )
	if SMSVoiceCheckBox.GetValue()=1 and SMSVoiceRadioOn.GetValue()=1 then
			SMSVoice$=" -enablevoice "
	end if
	if SMSVoiceCheckBox.GetValue()=1 and SMSVoiceRadioOff.GetValue()=1 then
			SMSVoice$=" -disablevoice "
	end if
    if SMSVoiceCheckBox.GetValue()=0 then
		SMSVoice$="  "
	end if
end function
connect (SMSVoiceCheckBox,wxEVT_COMMAND_CHECKBOX_CLICKED, "SMSVoiceChecked")

Function SMSVoiceRadio ( event )
	SMSVoiceCheckBox.SetValue(1)
	SMSVoiceChecked(-1)
end function
connect (SMSVoiceRadioOn,wxEVT_COMMAND_RADIOBUTTON_SELECTED, "SMSVoiceRadio")
connect (SMSVoiceRadioOff,wxEVT_COMMAND_RADIOBUTTON_SELECTED, "SMSVoiceRadio")


Function SMSReadChecked ( event )
	if SMSReadCheckBox.GetValue()=1 and SMSReadRadioOn.GetValue()=1 then
			SMSRead$=" -read "
	end if
	if SMSReadCheckBox.GetValue()=1 and SMSReadRadioOff.GetValue()=1 then
			SMSRead$=" -unread "
	end if
    if SMSReadCheckBox.GetValue()=0 then
		SMSRead$="  "
	end if
end function
connect (SMSReadCheckBox,wxEVT_COMMAND_CHECKBOX_CLICKED, "SMSReadChecked")

Function SMSReadRadio ( event )
	SMSReadCheckBox.SetValue(1)
	SMSReadChecked(-1)
end function
connect (SMSReadRadioOn,wxEVT_COMMAND_RADIOBUTTON_SELECTED, "SMSReadRadio")
connect (SMSReadRadioOff,wxEVT_COMMAND_RADIOBUTTON_SELECTED, "SMSReadRadio")

Function SMSSentChecked ( event )
	if SMSSentCheckBox.GetValue()=1  then ' and SMSSentRadioOn.GetValue()=1
			SMSSent$=" -sent "
	end if
	if SMSSentCheckBox.GetValue()=1 then ' and SMSSentRadioOff.GetValue()=1
			SMSSent$=" -unsent "
	end if
    if SMSSentCheckBox.GetValue()=0 then
		SMSSent$="  "
	end if

end function
connect (SMSSentCheckBox,wxEVT_COMMAND_CHECKBOX_CLICKED, "SMSSentChecked")

Function SMSSentRadio ( event )
	SMSSentCheckBox.SetValue(1)
	SMSSentChecked(-1)
end function
'connect (SMSSentRadioOn,wxEVT_COMMAND_RADIOBUTTON_SELECTED, "SMSSentRadio")
'connect (SMSSentRadioOff,wxEVT_COMMAND_RADIOBUTTON_SELECTED, "SMSSentRadio")


Function SMSReportChecked ( event )
	if SMSReportCheckBox.GetValue()=1 then
		SMSReport$=" -report "
	else
		SMSReport$=" -report "
	end if
end function
connect (SMSReportCheckBox,wxEVT_COMMAND_CHECKBOX_CLICKED, "SMSReportChecked")

Function SMSReplyChecked ( event )
	if SMSReplyCheckBox.GetValue()=1 then
		SMSReply$=" -reply "
	else
		SMSReply$=" -reply "
	end if
end function
connect (SMSReplyCheckBox,wxEVT_COMMAND_CHECKBOX_CLICKED, "SMSReplyChecked")

' ***** ADVANCED SECTION *****
NetMonitorButton = new wxButton(tabAdvanced, -1,"Start test",wxPoint(10,10),wxSize(60,40))
NetMonitorTestText =New wxTextCtrl(tabAdvanced,-1,"",wxPoint(80,20),wxSize(40,20))
NetMonitorResultText = New wxTextCtrl(tabAdvanced,-1,"",wxPoint(130,20),wxSize(80,80))
DEBUG= new wxStaticText(tabAdvanced,-1,"Results visualization not yet implemented, \nplease send me GAMMU output.",wxPoint(10,100))

Function NetMonitor ( event )
	OutputText.Clear
    test=wxMessageBox("WARNING! This commandline will be executed:\n"+"gammu "+DebugLevel+" --nokianetmonitor "+NetMonitorTestText.GetLineText(0)+" > gammu.tmp\n"+" ARE YOU SURE?","Nokia netmonitor warning", 255 ,frame) 
	if test=16 then
		exit function
	end if
	frame.SetStatusText("gammu "+DebugLevel+" --nokianetmonitor "+NetMonitorTestText.GetLineText(0)+" > gammu.tmp",1)
	shell("gammu "+DebugLevel+" --nokianetmonitor "+NetMonitorTestText.GetLineText(0)+" > gammu.tmp")
	 open "gammu.tmp" for input as #1
	conta=0
 	While (Not Eof( 1 )) And (conta<100)
  		conta=conta+1
  		Line Input #1,riga
  		OutputText.AppendText(riga+chr$(13))
		if len(riga)<40 then
	 		test=New wxStaticText(tabMain,-1,riga,wxPoint(310,10+conta*15),wxSize(250,15),1,"")
 		end if
 	End While
 Close(1)	
end function
connect (NetMonitorButton,wxEVT_COMMAND_BUTTON_CLICKED, "NetMonitor")

shell("gammu --version > gammu.tmp")
open "gammu.tmp" for input as #1
Line Input #1,riga
frame.SetTitle(version+riga)
close #1


for x=1 to 5
  a=Debug[x].SetValue(0)
next
a=Debug[1].SetValue(1)
DebugLevel="nothing"

for x=1 to 7
  a=Reset[x].SetValue(0)
next
a=Reset[1].SetValue(1)
a=Reset[6].SetValue(1)
ResetParamSettings="PHONE"
ResetParamPhone="SOFT"

for x=1 to 6
  a=SMSDurationRadio[x].SetValue(0)
next
a=SMSDurationRadio[6].SetValue(1)
SMSDuration$="MAX"

a=SMSLenRadio.SetValue(1)
a=SMSLenText.SetValue(160)

a=SMSCSetRadio.SetValue(1)
a=SMSCSetText.SetValue(1)
