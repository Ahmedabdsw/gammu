#
# This is a valgrind suppression file that should be used when using valgrind.
#
#  Here's an example of running valgrind:
#
#       cd python/dist/src
#       valgrind --tool=memcheck --suppressions=Misc/valgrind-python.supp \
#               ./python -E -tt ./Lib/test/regrtest.py -u bsddb,network
#
# You must edit Objects/obmalloc.c and uncomment Py_USING_MEMORY_DEBUGGER
# to use the preferred suppressions with Py_ADDRESS_IN_RANGE.
#
# If you do not want to recompile Python, you can uncomment
# suppressions for PyObject_Free and PyObject_Realloc.
#
# See Misc/README.valgrind for more information.

# all tool names: Addrcheck,Memcheck,cachegrind,helgrind,massif
{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Addr4
   fun:Py_ADDRESS_IN_RANGE
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Value4
   fun:Py_ADDRESS_IN_RANGE
}

{
   ADDRESS_IN_RANGE/Invalid read of size 8 (x86_64 aka amd64)
   Memcheck:Value8
   fun:Py_ADDRESS_IN_RANGE
}

{
   ADDRESS_IN_RANGE/Conditional jump or move depends on uninitialised value
   Memcheck:Cond
   fun:Py_ADDRESS_IN_RANGE
}

#
# Leaks (including possible leaks)
#    Hmmm, I wonder if this masks some real leaks.  I think it does.
#    Will need to fix that.
#

{
   Suppress leaking the GIL.  Happens once per process, see comment in ceval.c.
   Memcheck:Leak
   fun:malloc
   fun:PyThread_allocate_lock
   fun:PyEval_InitThreads
}

{
   Suppress leaking the GIL after a fork.
   Memcheck:Leak
   fun:malloc
   fun:PyThread_allocate_lock
   fun:PyEval_ReInitThreads
}

{
   Suppress leaking the autoTLSkey.  This looks like it shouldn't leak though.
   Memcheck:Leak
   fun:malloc
   fun:PyThread_create_key
   fun:_PyGILState_Init
   fun:Py_InitializeEx
   fun:Py_Main
}

{
   Hmmm, is this a real leak or like the GIL?
   Memcheck:Leak
   fun:malloc
   fun:PyThread_ReInitTLS
}

{
   Handle PyMalloc confusing valgrind (possibly leaked)
   Memcheck:Leak
   fun:realloc
   fun:_PyObject_GC_Resize
   fun:COMMENT_THIS_LINE_TO_DISABLE_LEAK_WARNING
}

{
   Handle PyMalloc confusing valgrind (possibly leaked)
   Memcheck:Leak
   fun:malloc
   fun:_PyObject_GC_New
   fun:COMMENT_THIS_LINE_TO_DISABLE_LEAK_WARNING
}

{
   Handle PyMalloc confusing valgrind (possibly leaked)
   Memcheck:Leak
   fun:malloc
   fun:_PyObject_GC_NewVar
   fun:COMMENT_THIS_LINE_TO_DISABLE_LEAK_WARNING
}

#
# Non-python specific leaks
#

{
   Handle pthread issue (possibly leaked)
   Memcheck:Leak
   fun:calloc
   fun:allocate_dtv
   fun:_dl_allocate_tls_storage
   fun:_dl_allocate_tls
}

{
   Handle pthread issue (possibly leaked)
   Memcheck:Leak
   fun:memalign
   fun:_dl_allocate_tls_storage
   fun:_dl_allocate_tls
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Addr4
   fun:PyObject_Free
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Value4
   fun:PyObject_Free
}

{
   GAMMU/Use of uninitialised value of size 8, probably amd64 version of above
   Memcheck:Value8
   fun:PyObject_Free
}

{
   ADDRESS_IN_RANGE/Conditional jump or move depends on uninitialised value
   Memcheck:Cond
   fun:PyObject_Free
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Addr4
   fun:PyObject_Realloc
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Value4
   fun:PyObject_Realloc
}

{
   ADDRESS_IN_RANGE/Conditional jump or move depends on uninitialised value
   Memcheck:Cond
   fun:PyObject_Realloc
}

###
### All the suppressions below are for errors that occur within libraries
### that Python uses.  The problems to not appear to be related to Python's
### use of the libraries.
###

{
   Generic ubuntu ld problems
   Memcheck:Addr8
   obj:/lib/ld-2.4.so
   obj:/lib/ld-2.4.so
   obj:/lib/ld-2.4.so
   obj:/lib/ld-2.4.so
}

{
   Generic gentoo ld problems
   Memcheck:Cond
   obj:/lib/ld-2.3.4.so
   obj:/lib/ld-2.3.4.so
   obj:/lib/ld-2.3.4.so
   obj:/lib/ld-2.3.4.so
}

{
   DBM problems, see test_dbm
   Memcheck:Param
   write(buf)
   fun:write
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   fun:dbm_close
}

{
   DBM problems, see test_dbm
   Memcheck:Value8
   fun:memmove
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   fun:dbm_store
   fun:dbm_ass_sub
}

{
   DBM problems, see test_dbm
   Memcheck:Cond
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   fun:dbm_store
   fun:dbm_ass_sub
}

{
   DBM problems, see test_dbm
   Memcheck:Cond
   fun:memmove
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   fun:dbm_store
   fun:dbm_ass_sub
}

{
   GDBM problems, see test_gdbm
   Memcheck:Param
   write(buf)
   fun:write
   fun:gdbm_open

}

{
   ZLIB problems, see test_gzip
   Memcheck:Cond
   obj:/lib/libz.so.1.2.3
   obj:/lib/libz.so.1.2.3
   fun:deflate
}

{
   Avoid problems w/readline doing a putenv and leaking on exit
   Memcheck:Leak
   fun:malloc
   fun:xmalloc
   fun:sh_set_lines_and_columns
   fun:_rl_get_screen_size
   fun:_rl_init_terminal_io
   obj:/lib/libreadline.so.4.3
   fun:rl_initialize
}

###
### These occur from somewhere within the SSL, when running
###  test_socket_sll.  They are too general to leave on by default.
###
###{
###   somewhere in SSL stuff
###   Memcheck:Cond
###   fun:memset
###}
###{
###   somewhere in SSL stuff
###   Memcheck:Value4
###   fun:memset
###}
###
###{
###   somewhere in SSL stuff
###   Memcheck:Cond
###   fun:MD5_Update
###}
###
###{
###   somewhere in SSL stuff
###   Memcheck:Value4
###   fun:MD5_Update
###}

#
# All of these problems come from using test_socket_ssl
#
{
   from test_socket_ssl
   Memcheck:Cond
   fun:BN_bin2bn
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:BN_num_bits_word
}

{
   from test_socket_ssl
   Memcheck:Value4
   fun:BN_num_bits_word
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:BN_mod_exp_mont_word
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:BN_mod_exp_mont
}

{
   from test_socket_ssl
   Memcheck:Param
   write(buf)
   fun:write
   obj:/usr/lib/libcrypto.so.0.9.7
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:RSA_verify
}

{
   from test_socket_ssl
   Memcheck:Value4
   fun:RSA_verify
}

{
   from test_socket_ssl
   Memcheck:Value4
   fun:DES_set_key_unchecked
}

{
   from test_socket_ssl
   Memcheck:Value4
   fun:DES_encrypt2
}

{
   from test_socket_ssl
   Memcheck:Cond
   obj:/usr/lib/libssl.so.0.9.7
}

{
   from test_socket_ssl
   Memcheck:Value4
   obj:/usr/lib/libssl.so.0.9.7
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:BUF_MEM_grow_clean
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:memcpy
   fun:ssl3_read_bytes
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:SHA1_Update
}

{
   from test_socket_ssl
   Memcheck:Value4
   fun:SHA1_Update
}


# Leaks 
{
   6 bytes in 1 blocks are still reachable
   Memcheck:Leak
   fun:malloc
   fun:strdup
   fun:Py_InitializeEx
}

{
   8 bytes in 1 blocks are still reachable
   Memcheck:Leak
   fun:malloc
   fun:PyList_New
   fun:do_mkvalue
   fun:va_build_value
   fun:Py_BuildValue
   fun:PyImport_Import
   fun:PyImport_ImportModule
   fun:_PyExc_Init
   fun:Py_InitializeEx
}

{
   4 bytes in 1 blocks are still reachable
   Memcheck:Leak
   fun:malloc
   fun:PyList_New
   obj:/usr/bin/python2.5
}

{
   8 bytes in 1 blocks are still reachable
   Memcheck:Leak
   fun:malloc
   fun:PyList_New
   obj:/usr/lib64/libpython2.5.so.1.0
}

{
   96 bytes in 3 blocks are still reachable
   Memcheck:Leak
   fun:malloc
   fun:PyThread_allocate_lock
   fun:PyInterpreterState_New
   fun:Py_InitializeEx
}

{
   108 bytes in 1 blocks are still reachable
   Memcheck:Leak
   fun:malloc
   fun:calculate_path
   fun:Py_GetProgramFullPath
}

{
   108 bytes in 1 blocks are still reachable
   Memcheck:Leak
   fun:malloc
   obj:/usr/bin/python2.5
   fun:Py_GetProgramFullPath
}

{
   138 bytes in 1 blocks are still reachable
   Memcheck:Leak
   fun:malloc
   obj:/usr/lib64/libpython2.5.so.1.0
   fun:Py_GetProgramFullPath
}

{
   456 bytes in 4 blocks are still reachable
   Memcheck:Leak
   fun:realloc
   fun:PyList_Append
}

{
   536 bytes in 1 blocks are still reachable
   Memcheck:Leak
   fun:malloc
   fun:_PyObject_GC_NewVar
   fun:PyFrame_New
   fun:Py_InitializeEx
}

{
   536 bytes in 1 blocks are still reachable
   Memcheck:Leak
   fun:malloc
   fun:_PyObject_GC_NewVar
   fun:PyFrame_New
   fun:PyEval_EvalCodeEx
}

{
   23,296 bytes in 81 blocks are possibly lost
   Memcheck:Leak
   fun:malloc
   fun:_PyObject_GC_Malloc
   fun:_PyObject_GC_NewVar
   fun:PyFrame_New
   fun:PyEval_EvalCodeEx
}

{
   992 bytes in 1 blocks are still reachable
   Memcheck:Leak
   fun:malloc
   fun:_PyInt_Init
   fun:Py_InitializeEx
}

{
   1,984 bytes in 2 blocks are still reachable
   Memcheck:Leak
   fun:malloc
   obj:/usr/lib64/libpython2.5.so.1.0
   fun:_PyInt_Init
}

{
   1,000 bytes in 2 blocks are still reachable
   Memcheck:Leak
   fun:malloc
   fun:PyStructSequence_InitType
   fun:initposix
}

{
   992 bytes in 1 blocks are still reachable
   Memcheck:Leak
   fun:malloc
   fun:fill_free_list
   fun:PyInt_FromLong
   fun:setup_confname_table
   fun:initposix
}

{
   1,344 bytes in 19 blocks are still reachable
   Memcheck:Leak
   fun:malloc
   fun:realloc
   fun:PyObject_Malloc
   fun:_PyObject_GC_NewVar
   fun:PyTuple_New
}

{
   1,372 bytes in 5 blocks are still reachable
   Memcheck:Leak
   fun:malloc
   fun:PyString_FromStringAndSize
   fun:r_object
   fun:r_object
   fun:r_object
   fun:r_object
   fun:r_object
   fun:r_object
   fun:PyMarshal_ReadLastObjectFromFile
   fun:load_source_module
}

{
   535 bytes in 2 blocks are still reachable
   Memcheck:Leak
   fun:malloc
   fun:PyString_FromStringAndSize
   obj:/usr/bin/python2.5
   obj:/usr/bin/python2.5
   obj:/usr/bin/python2.5
   obj:/usr/bin/python2.5
   obj:/usr/bin/python2.5
   obj:/usr/bin/python2.5
   obj:/usr/bin/python2.5
   fun:PyMarshal_ReadLastObjectFromFile
   obj:/usr/bin/python2.5
}

{
   1,372 bytes in 5 blocks are still reachable
   Memcheck:Leak
   fun:malloc
   fun:PyString_FromStringAndSize
   obj:/usr/lib64/libpython2.5.so.1.0
   obj:/usr/lib64/libpython2.5.so.1.0
   obj:/usr/lib64/libpython2.5.so.1.0
   obj:/usr/lib64/libpython2.5.so.1.0
   obj:/usr/lib64/libpython2.5.so.1.0
   obj:/usr/lib64/libpython2.5.so.1.0
   fun:PyMarshal_ReadObjectFromString
   fun:PyMarshal_ReadLastObjectFromFile
}

{
   3,072 bytes in 7 blocks are still reachable
   Memcheck:Leak
   fun:malloc
   fun:PyString_FromString
}

{
   11,760 bytes in 42 blocks are possibly lost
   Memcheck:Leak
   fun:malloc
   fun:_PyObject_GC_New
   fun:PyDict_New
}

{
   14,896 bytes in 51 blocks are possibly lost
   Memcheck:Leak
   fun:malloc
   fun:_PyObject_GC_Malloc
   fun:_PyObject_GC_New
   fun:PyDict_New
}

{
   11,760 bytes in 42 blocks are possibly lost
   Memcheck:Leak
   fun:malloc
   fun:_PyObject_GC_New
   fun:PyTuple_New
}

{
   524,288 bytes in 2 blocks are still reachable
   Memcheck:Leak
   fun:malloc
   fun:PyObject_Malloc
   fun:_PyObject_GC_NewVar
   fun:PyTuple_New
}

{
   1,376 bytes in 20 blocks are still reachable
   Memcheck:Leak
   fun:malloc
   fun:realloc
   fun:PyObject_Malloc
   fun:_PyObject_GC_Malloc
   fun:_PyObject_GC_NewVar
   fun:PyTuple_New
}

{
   786,432 bytes in 3 blocks are still reachable
   Memcheck:Leak
   fun:malloc
   fun:PyObject_Malloc
   fun:_PyObject_GC_Malloc
   fun:_PyObject_GC_NewVar
   fun:PyTuple_New
}

{
   11,960 bytes in 13 blocks are still reachable
   Memcheck:Leak
   fun:malloc
   fun:_PyObject_GC_Malloc
   fun:PyType_GenericAlloc
   fun:type_new
   fun:type_call
   fun:call_function_tail
   fun:PyObject_CallFunction
   fun:PyErr_NewException
   fun:initzipimport
}

{
   35,112 bytes in 77 blocks are still reachable
   Memcheck:Leak
   fun:malloc
   fun:_PyObject_GC_Malloc
   fun:PyType_GenericAlloc
   obj:/usr/bin/python2.5
   obj:/usr/bin/python2.5
   obj:/usr/bin/python2.5
   fun:PyObject_CallFunction
   fun:PyErr_NewException
   fun:initzipimport
}

{
   260,736 bytes in 35 blocks are still reachable
   Memcheck:Leak
   fun:malloc
   fun:dictresize
}

{
   16 bytes in 1 blocks are still reachable
   Memcheck:Leak
   fun:malloc
   obj:/lib/ld-2.7.so
}

{
   32 bytes in 1 blocks are still reachable
   Memcheck:Leak
   fun:calloc
   obj:/lib/libdl-2.7.so
}

{
   32 bytes in 1 blocks are still reachable
   Memcheck:Leak
   fun:calloc
   obj:/lib64/libdl-2.8.so
}

{
   648 bytes in 4 blocks are still reachable
   Memcheck:Leak
   fun:calloc
   obj:/lib/ld-2.7.so
}

{
   480 bytes in 3 blocks are still reachable
   Memcheck:Leak
   fun:calloc
   obj:/lib64/ld-2.8.so
}

{
   32 bytes in 1 blocks are still reachable
   Memcheck:Leak
   fun:malloc
   obj:/lib64/ld-2.8.so
}

{
   Use of uninitialised value of size 8
   Memcheck:Value8
   fun:PyObject_Realloc
}

{
   136,512 bytes in 36 blocks are still reachable
   Memcheck:Leak
   fun:malloc
   obj:/usr/bin/python2.5
   fun:PyType_Ready
   fun:PyType_Ready
   fun:_Py_ReadyTypes
   fun:Py_InitializeEx
   fun:Py_Initialize
   fun:Py_Main
   fun:main
}

{
   286,080 bytes in 41 blocks are still reachable
   Memcheck:Leak
   fun:malloc
   obj:/usr/lib64/libpython2.5.so.1.0
   fun:PyType_Ready
   fun:PyType_Ready
   fun:_Py_ReadyTypes
   fun:Py_InitializeEx
   fun:Py_Main
   fun:(below main)
}

{
   988 bytes in 1 blocks are still reachable
   Memcheck:Leak
   fun:malloc
   obj:/usr/bin/python2.5
   fun:PyInt_FromLong
   obj:/usr/bin/python2.5
   fun:PySymtable_Build
   fun:PyAST_Compile
   fun:PyRun_FileExFlags
   fun:PyRun_SimpleFileExFlags
   fun:Py_Main
   fun:main
}

{
   1,112 bytes in 5 blocks are still reachable
   Memcheck:Leak
   fun:realloc
   obj:/usr/lib64/libpython2.5.so.1.0
   obj:/usr/lib64/libpython2.5.so.1.0
   obj:/usr/lib64/libpython2.5.so.1.0
   fun:PyType_Ready
   fun:_PyExc_Init
   fun:Py_InitializeEx
   fun:Py_Main
   fun:(below main)
}


### This is a CURL bug on SUSE 11.0
{
   Leak from curl_init
   Memcheck:Leak
   fun:malloc
   fun:CRYPTO_malloc
   fun:ENGINE_new
   fun:ENGINE_load_dynamic
   fun:Curl_ossl_init
   fun:curl_global_init
}
{
   Leak from curl_init
   Memcheck:Leak
   fun:malloc
   fun:CRYPTO_malloc
   fun:sk_new
   obj:/usr/lib64/libssl.so.0.9.8
   fun:SSL_COMP_get_compression_methods
   fun:SSL_library_init
   fun:Curl_ossl_init
   fun:curl_global_init
}


# Shell suppressions, /bin/sh is used for smsd testing
{
   Bash-1
   Memcheck:Leak
   fun:malloc
   fun:xmalloc
   fun:set_signal
   fun:trap_builtin
   fun:execute_builtin
}
{
   Bash-2
   Memcheck:Leak
   fun:realloc
   fun:xrealloc
   fun:maybe_make_export_env
   fun:execute_simple_command
}
{
   Bash-3
   Memcheck:Leak
   fun:malloc
   fun:xmalloc
   fun:set_default_locale
   fun:main
}
{
   Bash-4
   Memcheck:Leak
   fun:malloc
   fun:xrealloc
   fun:shell_getc
   fun:read_token
   fun:yyparse
   fun:parse_command
}
{
   Bash-5
   Memcheck:Leak
   fun:realloc
   fun:xrealloc
   fun:maybe_make_export_env
   fun:execute_simple_command
}
{
   Bash-6
   Memcheck:Leak
   fun:malloc
   fun:xmalloc
   fun:make_word_list
   fun:copy_word_list
   fun:expand_word_list_internal
   fun:execute_simple_command
}
{
   Bash-7
   Memcheck:Leak
   fun:malloc
   fun:xmalloc
   fun:make_if_command
}
{
   Bash-7
   Memcheck:Leak
   fun:malloc
   fun:xrealloc
   fun:read_token
   fun:yyparse
   fun:parse_command
}
{
   Dash-1
   Memcheck:Leak
   fun:malloc
   fun:strdup
   obj:/bin/dash
}
{
   Dash-2
   Memcheck:Leak
   fun:malloc
   obj:/bin/dash
}
{
   Dash-3
   Memcheck:Leak
   fun:malloc
   fun:realloc
   obj:/bin/dash
}
