#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# vim: expandtab sw=4 ts=4 sts=4:
'''
Gammu man page generator
'''
__author__ = 'Michal Čihař'
__email__ = 'michal@cihar.com'
__license__ = '''
Copyright (c) 2003 - 2007 Michal Čihař

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License version 2 as published by
the Free Software Foundation.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
'''

# Configuration

'''
Path to gammu binary.
'''
BIN_PATH = 'build/gammu/gammu'

'''
Output path where man page will be stored.
'''
OUT_PATH = '/tmp/gammu.1'


# Man page data

HEADER = '.TH "Gammu" "1" "%(date)s (%(version)s)" "Gammu team" "Cellular phones utilities"\n'
SECTION = '\n.SH "%s"\n'
PARAGRAPH = '.TP\n%s\n'

# Fixed parts

SEE_ALSO = '''
.LP
README

<http://www.gammu.org/>

cu(1)

gnokii(1)

xgnokii(2)
'''

AUTHORS = '''
.LP 
\\fIMichal Cihar\\fR
<michal@cihar.com>
.br
<http://cihar.com/>
.LP 
\\fIMarcin Wiacek\\fR
<marcin@mwiacek.com>
.br
<http://www.mwiacek.com/>

Here are some people, who somehow helped in this project. Probably not
everyone is mentioned. If you think, you're missed, please let us know:
   
1.all people developing Gnokii (some ideas are from it) like
\\fIPavel Janik\\fR, \\fIPawel Kot\\fR, \\fIManfred Jonsson\\fR, ...
(see CREDITS from Gnokii)

2.all people responsible for MyGnokii (Gammu is based on it too)
like \\fIGabriele Zappi\\fR, \\fIRalf Thelen\\fR, .... (see CREDITS from MyGnokii)

3.\\fIMarcin Wiacek\\fR \\- author of all this mess ;\\-)

4.\\fIMarkus Plail & Tibor Harsszegi\\fR \\- for DCT4 help

5.\\fIFrederick Ros \\fR\\- 5210 help

6.\\fIJan Kratochvil \\fR\\- AT commands

7.\\fIWalek\\fR \\- fixes, progress in many things

8.\\fIMarcel Holtmann\\fR \\- Bluetooth tests

9.\\fIMichal Cihar\\fR \\- general discussions and tries into making one big and good GSM manager (many changes and suggestions), Alcatel support

10.\\fIOndrej Rybin & Tomasz Motylewski & Tom Nelson & Multi-COM & GriffinTeam\\fR \\- hardware help

11.\\fIJoergen Thomsen\\fR \\- SMS daemon
'''

FILES = '''
.LP 
\\fI~/.gammurc\\fP
.br
\\fI/usr/share/doc/gammu/*\\fP
.br
\\fI/dev/ircomm?\\fP
.br
\\fI/dev/ttyS?\\fP
'''

EXAMPLES = '''
.LP 
To check it out, edit \\fI~/.gammurc\\fP and put there something like

\\fB[gammu]
.br
port = /dev/ttyACM0
.br
connection = at
\\fR
'''

# Code

import os
import re

SECTION_MATCHER = re.compile(' (.*) - (.*)')
COMMAND_MATCHER = re.compile('--(([^ ]*)( (.*))?)')

def read_help(section):
    pipe = os.popen('%s --help %s' % (BIN_PATH, section))
    data = pipe.readlines()
    pipe.close()
    return data

def parse_sections(lines):
    sections = []
    section_data = {}
    for line in lines:
        match = SECTION_MATCHER.match(line)
        if match is None:
            continue
        section = match.groups(1)[0]
        sections.append(section)
        section_data[section] = match.groups(1)[1]
    return sections, section_data

def parse_section_help(lines):
    result = {}
    for line in lines:
        match = COMMAND_MATCHER.match(line)
        command = match.groups(1)[1]
        options = match.groups(1)[3]
        result[command] = options
    return result

def write_section(output, name):
    output.write(SECTION % name)

def format_man_page(output, data):
    keys = data.keys()
    keys.sort()
    for command in keys:
        output.write('.TP\n\\fB%(command)s\\fR\n' % {'command' : command})

def main():
    text = read_help('')
    result = re.match('\[Gammu version ([0-9.]*) built [0-9:]* (.*)\]', text[0])
    build_date = result.groups(1)[1]
    version = result.groups(1)[0]
    syntax = text[2]

    syntax_help = []
    syntax_help.append(text[3] + text[4])
    syntax_help.append(text[6])

    output = file(OUT_PATH, 'w')
    output.write(HEADER % {'version' : version, 'date' : build_date})

    write_section(output, 'OPTIONS')

    sections, section_data = parse_sections(text[12:])
    for section in sections:
        section_text = read_help(section)
        write_section(output, section_data[section])
        data = parse_section_help(section_text[4:])
        format_man_page(output, data)

    write_section(output, 'FILES')
    output.write(FILES)

    write_section(output, 'EXAMPLES')
    output.write(EXAMPLES)

    write_section(output, 'AUTHORS')
    output.write(AUTHORS)

    write_section(output, 'SEE ALSO')
    output.write(SEE_ALSO)

    output.close()

if __name__ == '__main__':
    main()
